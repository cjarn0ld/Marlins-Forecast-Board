{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Marlins Forecast App\"\n",
        "author: \"Charles Arnold\"\n",
        "date: \"`r Sys.Date()`\"\n",
        "format: html\n",
        "editor: visual\n",
        "---"
      ],
      "id": "7c305c91"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import os\n",
        "from datetime import datetime, timedelta\n",
        "from flask import Flask, render_template, request, redirect, url_for, session, flash\n",
        "from flask_sqlalchemy import SQLAlchemy\n",
        "from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\n",
        "from werkzeug.security import generate_password_hash, check_password_hash\n",
        "from werkzeug.utils import secure_filename\n",
        "from utils.scoring import calculate_user_scores\n",
        "\n",
        "# App Configuration\n",
        "app = Flask(__name__)\n",
        "app.config['SECRET_KEY'] = 'test123'\n",
        "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///forecasts.db'\n",
        "app.config['UPLOAD_FOLDER'] = 'static/uploads'\n",
        "\n",
        "# Authentication Constants\n",
        "ADMIN_USERNAME = \"admin\"  # Single source for admin credentials\n",
        "ADMIN_PASSWORD = \"test123\"\n",
        "\n",
        "db = SQLAlchemy(app)\n",
        "login_manager = LoginManager(app)\n",
        "login_manager.login_view = 'login'\n",
        "\n",
        "class Admin(UserMixin, db.Model):\n",
        "   id = db.Column(db.Integer, primary_key=True)\n",
        "   username = db.Column(db.String(100), unique=True, nullable=False)\n",
        "   password_hash = db.Column(db.String(128), nullable=False)\n",
        "\n",
        "class Question(db.Model):\n",
        "   id = db.Column(db.Integer, primary_key=True)  \n",
        "   question_id = db.Column(db.String(100), unique=True, nullable=False)\n",
        "   text = db.Column(db.String(500), nullable=False)\n",
        "   due_date = db.Column(db.DateTime, nullable=False)\n",
        "   difficulty = db.Column(db.Integer, default=3)\n",
        "   actual = db.Column(db.Float, nullable=True)\n",
        "   image = db.Column(db.String(300), nullable=True)\n",
        "   forecasts = db.relationship('Forecast', backref='question', lazy=True)\n",
        "\n",
        "class Forecast(db.Model):\n",
        "   id = db.Column(db.Integer, primary_key=True)\n",
        "   user_id = db.Column(db.String(100), nullable=False)  \n",
        "   question_id = db.Column(db.Integer, db.ForeignKey('question.id'), nullable=False)\n",
        "   probability = db.Column(db.Float, nullable=False)\n",
        "   timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n",
        "\n",
        "@login_manager.user_loader\n",
        "def load_user(user_id):\n",
        "   return Admin.query.get(int(user_id))\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "   return render_template('home.html')\n",
        "\n",
        "@app.route('/login', methods=['GET', 'POST'])\n",
        "def login():\n",
        "   if request.method == 'POST':\n",
        "       username = request.form['username']\n",
        "       password = request.form['password']\n",
        "       \n",
        "       if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:\n",
        "           admin = Admin.query.filter_by(username=ADMIN_USERNAME).first()\n",
        "           if not admin:\n",
        "               admin = Admin(\n",
        "                   username=ADMIN_USERNAME,\n",
        "                   password_hash=generate_password_hash(ADMIN_PASSWORD)\n",
        "               )\n",
        "               db.session.add(admin)\n",
        "               db.session.commit()\n",
        "           \n",
        "           login_user(admin)\n",
        "           return redirect(url_for('admin'))\n",
        "       else:\n",
        "           flash('Invalid username or password', 'error')\n",
        "           \n",
        "   return render_template('login.html')\n",
        "\n",
        "@app.route('/logout')\n",
        "@login_required\n",
        "def logout():\n",
        "   logout_user()\n",
        "   return redirect(url_for('home'))\n",
        "\n",
        "@app.route('/admin')\n",
        "@login_required\n",
        "def admin():\n",
        "   return render_template('admin.html')\n",
        "\n",
        "@app.route('/add_question', methods=['POST'])\n",
        "@login_required\n",
        "def add_question():\n",
        "   question_text = request.form['question_text']\n",
        "   due_date_str = request.form['due_date']\n",
        "   if len(due_date_str.split()) == 1:\n",
        "       due_date_str += ' 23:59:59'\n",
        "   due_date = datetime.strptime(due_date_str, '%Y-%m-%d %H:%M:%S')\n",
        "   difficulty = int(request.form.get('difficulty', 3))\n",
        "   question_id = request.form.get('question_id', '').strip()\n",
        "   \n",
        "   if not question_id:\n",
        "       import random\n",
        "       import string\n",
        "       question_id = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n",
        "   \n",
        "   actual = request.form.get('actual') if request.form.get('set_outcome') == 'on' else None\n",
        "   image = request.files.get('image')\n",
        "   filename = None\n",
        "\n",
        "   if image and allowed_file(image.filename):\n",
        "       filename = secure_filename(image.filename)\n",
        "       image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n",
        "\n",
        "   question = Question(text=question_text, due_date=due_date, difficulty=difficulty, \n",
        "                      actual=actual, image=filename, question_id=question_id)\n",
        "   db.session.add(question)\n",
        "   db.session.commit()\n",
        "\n",
        "   flash('Question added successfully', 'success')\n",
        "   return redirect(url_for('admin'))\n",
        "\n",
        "@app.route('/forecasts')\n",
        "def forecasts():\n",
        "   questions = Question.query.all()\n",
        "   now = datetime.utcnow()\n",
        "   featured = [q for q in questions if q.due_date > now]\n",
        "   previous = [q for q in questions if q.due_date <= now]\n",
        "   is_admin = current_user.is_authenticated\n",
        "   return render_template('forecasts.html', featured=featured, previous=previous, \n",
        "                        is_admin=is_admin, now=now)\n",
        "\n",
        "@app.route('/question_responses/<int:question_id>')\n",
        "def question_responses(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   forecasts = Forecast.query.filter_by(question_id=question_id)\\\n",
        "               .order_by(Forecast.timestamp.desc()).all()\n",
        "   now = datetime.utcnow()\n",
        "   return render_template('question_responses.html', question=question, \n",
        "                        forecasts=forecasts, now=now)\n",
        "\n",
        "@app.route('/question/<int:question_id>')\n",
        "def question_detail(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   forecasts = Forecast.query.filter_by(question_id=question_id).all()\n",
        "   return render_template('question_detail.html', question=question, forecasts=forecasts)\n",
        "\n",
        "@app.route('/submit_forecast', methods=['POST'])\n",
        "def submit_forecast():\n",
        "   try:\n",
        "       question_id = request.form.get('question_id')\n",
        "       user_id = request.form.get('user_id')\n",
        "       probability = float(request.form.get('probability'))\n",
        "       \n",
        "       question = Question.query.get_or_404(question_id)\n",
        "       \n",
        "       if question.due_date <= datetime.utcnow():\n",
        "           flash('Question has expired', 'error')\n",
        "           return redirect(url_for('forecasts'))\n",
        "           \n",
        "       existing = Forecast.query.filter_by(\n",
        "           question_id=question_id,\n",
        "           user_id=user_id\n",
        "       ).first()\n",
        "       \n",
        "       if existing:\n",
        "           flash('You have already submitted a forecast', 'error')\n",
        "           return redirect(url_for('forecasts'))\n",
        "           \n",
        "       forecast = Forecast(\n",
        "           user_id=user_id,\n",
        "           question_id=question_id,\n",
        "           probability=probability\n",
        "       )\n",
        "       \n",
        "       db.session.add(forecast)\n",
        "       db.session.commit()\n",
        "       \n",
        "       flash('Forecast submitted successfully!', 'success')\n",
        "       return redirect(url_for('forecasts'))\n",
        "       \n",
        "   except Exception as e:\n",
        "       flash(str(e), 'error')\n",
        "       return redirect(url_for('forecasts'))\n",
        "\n",
        "@app.route('/leaderboard')\n",
        "def leaderboard():\n",
        "   outcomes = {q.id: q.actual for q in Question.query.filter(Question.actual != None)}\n",
        "   \n",
        "   if not outcomes:\n",
        "       return render_template('leaderboard.html', leaderboard=[])\n",
        "   \n",
        "   forecasts = Forecast.query.all()\n",
        "   user_scores = {}\n",
        "   \n",
        "   for forecast in forecasts:\n",
        "       if forecast.question_id in outcomes:\n",
        "           if forecast.user_id not in user_scores:\n",
        "               user_scores[forecast.user_id] = []\n",
        "           user_scores[forecast.user_id].append({\n",
        "               'prediction': forecast.probability,\n",
        "               'actual': outcomes[forecast.question_id]\n",
        "           })\n",
        "\n",
        "   leaderboard_data = []\n",
        "   for user_id, predictions in user_scores.items():\n",
        "       total_brier = sum((p['prediction'] - p['actual']) ** 2 for p in predictions)\n",
        "       avg_brier = total_brier / len(predictions)\n",
        "       accuracy = 1 - avg_brier\n",
        "       \n",
        "       leaderboard_data.append({\n",
        "           'user': user_id,\n",
        "           'questions': len(predictions),\n",
        "           'avg_brier_score': avg_brier,\n",
        "           'accuracy': accuracy * 100\n",
        "       })\n",
        "\n",
        "   leaderboard_data.sort(key=lambda x: x['accuracy'], reverse=True)\n",
        "   return render_template('leaderboard.html', leaderboard=leaderboard_data)\n",
        "\n",
        "@app.route('/manage_outcomes')\n",
        "@login_required\n",
        "def manage_outcomes():\n",
        "   questions = Question.query.all()\n",
        "   now = datetime.utcnow()\n",
        "   return render_template('manage_outcomes.html', questions=questions, now=now)\n",
        "\n",
        "@app.route('/manage_outcomes/<int:question_id>', methods=['POST'])\n",
        "@login_required\n",
        "def update_outcome(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   actual = request.form.get('actual')\n",
        "   \n",
        "   try:\n",
        "       actual = float(actual)\n",
        "       if not 0 <= actual <= 1:\n",
        "           flash('Outcome must be between 0 and 1', 'error')\n",
        "           return redirect(url_for('manage_outcomes'))\n",
        "           \n",
        "       question.actual = actual\n",
        "       db.session.commit()\n",
        "       flash('Outcome updated successfully', 'success')\n",
        "       \n",
        "   except ValueError:\n",
        "       flash('Invalid outcome value', 'error')\n",
        "       \n",
        "   return redirect(url_for('manage_outcomes'))\n",
        "\n",
        "@app.route('/edit_question/<int:question_id>', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def edit_question(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   \n",
        "   if request.method == 'POST':\n",
        "       question.text = request.form['question_text']\n",
        "       question.due_date = datetime.strptime(request.form['due_date'], '%Y-%m-%d %H:%M:%S')\n",
        "       question.difficulty = int(request.form['difficulty'])\n",
        "       \n",
        "       actual = request.form.get('actual')\n",
        "       if actual:\n",
        "           try:\n",
        "               actual = float(actual)\n",
        "               if 0 <= actual <= 1:\n",
        "                   question.actual = actual\n",
        "               else:\n",
        "                   flash('Outcome must be between 0 and 1', 'error')\n",
        "                   return render_template('edit_question.html', question=question)\n",
        "           except ValueError:\n",
        "               flash('Invalid outcome value', 'error')\n",
        "               return render_template('edit_question.html', question=question)\n",
        "       \n",
        "       image = request.files.get('image')\n",
        "       if image and allowed_file(image.filename):\n",
        "           if question.image:\n",
        "               old_image_path = os.path.join(app.config['UPLOAD_FOLDER'], question.image)\n",
        "               if os.path.exists(old_image_path):\n",
        "                   os.remove(old_image_path)\n",
        "           \n",
        "           filename = secure_filename(image.filename)\n",
        "           image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n",
        "           question.image = filename\n",
        "           \n",
        "       db.session.commit()\n",
        "       flash('Question updated successfully', 'success')\n",
        "       return redirect(url_for('forecasts'))\n",
        "       \n",
        "   return render_template('edit_question.html', question=question)\n",
        "\n",
        "@app.route('/toggle_question_status/<int:question_id>')\n",
        "@login_required\n",
        "def toggle_question_status(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   now = datetime.utcnow()\n",
        "   \n",
        "   if question.due_date <= now:\n",
        "       question.due_date = now + timedelta(days=1)\n",
        "   else:\n",
        "       question.due_date = now - timedelta(minutes=1)\n",
        "   \n",
        "   db.session.commit()\n",
        "   return redirect(url_for('forecasts'))\n",
        "\n",
        "@app.route('/view_responses/<int:question_id>')\n",
        "@login_required\n",
        "def view_responses(question_id):\n",
        "   question = Question.query.get_or_404(question_id)\n",
        "   forecasts = Forecast.query.filter_by(question_id=question_id)\\\n",
        "               .order_by(Forecast.timestamp.desc()).all()\n",
        "   return render_template('view_responses.html', question=question, forecasts=forecasts)\n",
        "\n",
        "def allowed_file(filename):\n",
        "   ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}\n",
        "   return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    with app.app_context():\n",
        "        db.create_all()\n",
        "        # Initialize admin if needed\n",
        "        admin_user = Admin.query.filter_by(username=ADMIN_USERNAME).first()\n",
        "        if not admin_user:\n",
        "            admin_user = Admin(\n",
        "                username=ADMIN_USERNAME, \n",
        "                password_hash=generate_password_hash(ADMIN_PASSWORD)\n",
        "            )\n",
        "            db.session.add(admin_user)\n",
        "            db.session.commit()\n",
        "            \n",
        "    # Use Jupyter-friendly port and disable debug\n",
        "    app.run(port=8888, debug=False)"
      ],
      "id": "91563031",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}